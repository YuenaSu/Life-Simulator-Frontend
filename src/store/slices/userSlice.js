import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

import userService from "../../services/userServices";

export const subscribe = createAsyncThunk("user/subscribe", async () => {
  const response = await userService.subscribe();
  return response.data;
});

export const login = createAsyncThunk(
  "user/login",
  async ({ email, password }) => {
    const response = await userService.login(email, password);
    return response.data;
  },
);

export const loginWithThirdParty = createAsyncThunk(
  "user/loginWithThirdParty",
  async (user) => {
    const response = await userService.loginWithThirdParty(user);
    return response.data;
  },
);

export const register = createAsyncThunk(
  "user/register",
  async ({ email, password, username }) => {
    const response = await userService.register(email, password, username);
    return response.data;
  },
);

export const updateUser = createAsyncThunk(
  "user/updateUser",
  async ({ user, password }) => {
    const response = await userService.updateUser(user, password);
    return response.data;
  },
);

const initialUser = {
  email: "",
  username: "",
  permissions: [],
};

const initialState = {
  status: "idle",
  isAuthenticated: false,
  user: initialUser,
  error: {},
};

const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    logout: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = false;
      state.user = initialUser;
    },
    setEmail: (state, action) => ({
      ...state,
      user: {
        ...initialUser,
        email: action.payload,
      },
    }),
    resetError: (state, action) => {
      state.error = { ...state.error, [action.payload]: "" };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(subscribe.pending, (state) => {
        state.status = "loading";
      })
      .addCase(subscribe.fulfilled, (state, action) => {
        state.status = "idle";
        state.user.permissions = action.payload.permissions;
      })
      .addCase(login.pending, (state) => {
        state.status = "loading";
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
        state.isAuthenticated = true;
      })
      .addCase(login.rejected, (state) => {
        state.status = "idle";
        state.isAuthenticated = false;
      })
      .addCase(register.pending, (state) => {
        state.status = "loading";
        state.isAuthenticated = false;
      })
      .addCase(register.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
        state.isAuthenticated = true;
        state.error = { ...state.error, register: "" };
      })
      .addCase(register.rejected, (state, action) => {
        state.status = "idle";
        state.isAuthenticated = false;
        state.error = { ...state.error, register: action.error.message };
      })
      .addCase(loginWithThirdParty.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginWithThirdParty.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
        state.isAuthenticated = true;
      })
      .addCase(updateUser.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateUser.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
      })
      .addCase(updateUser.rejected, (state, action) => {
        state.status = "idle";
        state.error = { ...state.error, updateUser: action.error.message };
      });
  },
});

export const { logout, setEmail, resetError } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state?.user?.user;
export const selectAuth = (state) => state?.user?.isAuthenticated;
export const selectError = (state) => state?.user?.error;

export default userSlice.reducer;
